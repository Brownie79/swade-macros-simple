{"name":"Combat Flow","permission":{"default":0,"TW5dUO4zIyOkAYKw":3},"type":"script","flags":{},"scope":"global","command":"let isValidConditions = true;\r\nlet diceStep = [\"d4\", \"d6\", \"d8\", \"d10\", \"d12\"];\r\nlet currentActor;\r\n\r\n//Uses the selected actor to figure out guns\r\nif (canvas.tokens.controlled.length != 1) {\r\n    ui.notifications.warn(i18n(\"swadeMacro.ui.notification.needActor\"));\r\n    isValidConditions = false;\r\n}else{\r\n    // Set Actor\r\n    currentActor = canvas.tokens.controlled[0].actor;\r\n\r\n    // Check shaken state\r\n    if (currentActor.data.data.status.isShaken) {\r\n        ui.notifications.warn(i18n(\"swadeMacro.ui.notification.actorShaken\"));\r\n        isValidConditions = false;\r\n    }\r\n}\r\n\r\n// Check target selected\r\nif (Array.from(game.user.targets).length != 1) {\r\n    ui.notifications.warn(i18n(\"swadeMacro.ui.notification.needTarget\"));\r\n    isValidConditions = false;\r\n}\r\n\r\nlet currentTarget;\r\nlet weapons;\r\n\r\nfunction i18n(key) {\r\n    return game.i18n.localize(key);\r\n}\r\n\r\nif (isValidConditions) openDialogCombat();\r\n\r\n// Attack type choice\r\nasync function openDialogCombat()\r\n{   \r\n    // Set actor target\r\n    currentTarget = Array.from(game.user.targets)[0].actor;\r\n\r\n    // Set weapons list\r\n    weapons = currentActor.items.filter((el) => el.type == \"weapon\" && el.data.data.equipped);\r\n\r\n    let template = await renderTemplate(\"modules/swade-macros-simple/templates/macro-combat-flow/dialog-combat.html\");\r\n\r\n    new Dialog({\r\n        title: i18n(\"swadeMacro.combatDialog.title\"),\r\n        content: template,\r\n        buttons: {\r\n            contact: {\r\n                label: i18n(\"swadeMacro.combatDialog.meleeButton\"),\r\n                callback: async (html) => {\r\n                    meleeAttackForm(html);\r\n                },\r\n            },\r\n            ranged: {\r\n                label: i18n(\"swadeMacro.combatDialog.rangeButton\"),\r\n                callback: async (html) => {\r\n                    rangedAttackForm(html);\r\n                },\r\n            }\r\n        },\r\n    }, { width: 400 }).render(true);\r\n    \r\n}\r\n\r\n//Utility function for printing things to chat\r\nfunction printMessage(message) {\r\n    ChatMessage.create(\r\n        {\r\n        speaker: {\r\n            actor: currentActor,\r\n            alias: currentActor.name,\r\n        },\r\n        content: message,\r\n        },\r\n        {}\r\n    );\r\n} // end  printMessage\r\n\r\n// Add EventListener to a html element\r\nfunction addEventListenerOnHtmlElement(element, event, func){\r\n    // Use Hook to add event to chat message html element\r\n    Hooks.once(\"renderChatMessage\", (chatItem, html) => { \r\n        html[0].querySelector(element).addEventListener(event, func);\r\n    });\r\n} // end addEventListenerOnHtmlElement\r\n\r\n// melee attack form\r\nasync function  meleeAttackForm(){\r\n     let meleeWeapons = weapons.filter((el) => el.data.data.range == \"0\" || el.data.data.range == \"\");\r\n \r\n    // Check if template is not empty\r\n    if (meleeWeapons.length == 0) {\r\n        ui.notifications.warn(i18n(\"swadeMacro.ui.notification.noWeaponsMessage\"));\r\n        isValidConditions = false;\r\n    }\r\n\r\n    // Prepare melee atack form template\r\n    let template = await renderTemplate(\"modules/swade-macros-simple/templates/macro-combat-flow/dialog-melee-attack.html\",{weapons : meleeWeapons });\r\n\r\n    if (isValidConditions) {\r\n        // Show form\r\n        new Dialog({\r\n            title: i18n(\"swadeMacro.meleeCombatDialog.title\"),\r\n            content: template,\r\n            buttons: {\r\n                ok: {\r\n                    label: i18n(\"swadeMacro.meleeCombatDialog.confirmButton\"),\r\n                    callback: async (html) => {\r\n                    commitAttack({ html, attackSkillName : game.settings.get(\"swade-macros-simple\", \"skillFighting\") });\r\n                    },\r\n                },\r\n                cancel: {\r\n                    label: i18n(\"swadeMacro.meleeCombatDialog.cancelButton\"),\r\n                },\r\n            },\r\n            default: \"ok\",\r\n        }, { width: 550 }).render(true);\r\n    }\r\n} // end contactAttackForm\r\n\r\n// Ranged attack form\r\nasync function rangedAttackForm(){\r\n\r\n    let rangeWeapons = weapons.filter((el) => el.data.data.range != \"0\" && el.data.data.range != \"\")\r\n    \r\n    // Check if template is not empty\r\n    if (rangeWeapons.length == 0) {\r\n        ui.notifications.warn(i18n(\"swadeMacro.ui.notification.noWeaponsMessage\"));\r\n        isValidConditions = false;\r\n    }\r\n    \r\n    // Prepare range atack form template\r\n    let trackAmmoConsumption = game.settings.get(\"swade-macros-simple\", \"trackAmmoConsumption\");\r\n    let template = await renderTemplate(\"modules/swade-macros-simple/templates/macro-combat-flow/dialog-range-attack.html\",{\r\n        weapons : rangeWeapons, \r\n        trackAmmo : trackAmmoConsumption, \r\n        notTrackAmmo : !trackAmmoConsumption \r\n    });\r\n\r\n    // Show form\r\n    if (isValidConditions) {\r\n        new Dialog({\r\n            title: i18n(\"swadeMacro.rangeCombatDialog.title\"),\r\n            content: template,\r\n            buttons: {\r\n                ok: {\r\n                label: i18n(\"swadeMacro.rangeCombatDialog.confirmButton\"),\r\n                callback: async (html) => {\r\n                    commitAttack({ html, attackSkillName : game.settings.get(\"swade-macros-simple\", \"skillShooting\") });\r\n                },\r\n                },\r\n                cancel: {\r\n                label: i18n(\"swadeMacro.rangeCombatDialog.cancelButton\"),\r\n                },\r\n            },\r\n            default: \"ok\",\r\n        },{ width: 550 }).render(true);\r\n    }\r\n\r\n} // end rangedAttackForm\r\n\r\n// Settings for damage outpout\r\nasync function damageSettings(params, eventTarget)\r\n{\r\n    let doubleTapEdge = params.doubleTapEdge;\r\n    let threeRoundBurstAbility = params.threeRoundBurstAbility;\r\n    let grittyDamage = game.settings.get(\"swade-macros-simple\", \"grittyDamage\");\r\n    let isRangeAttack = params.isRangeAttack;\r\n\r\n    let template = await renderTemplate(\"modules/swade-macros-simple/templates/macro-combat-flow/dialog-damage-settings.html\", {\r\n        doubleTapEdge : doubleTapEdge,\r\n        threeRoundBurstAbility : threeRoundBurstAbility,\r\n        isGrittyDamage : grittyDamage,\r\n        notGrittyDamage : !grittyDamage,\r\n        isRangeAttack : isRangeAttack\r\n    });\r\n\r\n    new Dialog({\r\n        title: i18n(\"swadeMacro.damageSettingsDialog.title\"),\r\n        content: template,\r\n        buttons: {\r\n            ok: {\r\n            label: i18n(\"swadeMacro.damageSettingsDialog.confirmButton\"),\r\n            callback: async (html) => {\r\n                eventTarget.style.display = \"none\";\r\n                params.html = html;\r\n                damageResult(params);\r\n            },\r\n            },\r\n            cancel: {\r\n            label: i18n(\"swadeMacro.damageSettingsDialog.cancelButton\"),\r\n            },\r\n        },\r\n        default: \"ok\",\r\n    },{ width: 540 }).render(true);    \r\n} //end damageSettings\r\n\r\n//Attack process\r\nasync function commitAttack(params)\r\n{\r\n\r\n    let html = params.html;\r\n    let attackSkillName = params.attackSkillName;\r\n    let bennieUsed = params.bennieUsed;\r\n    bennieUsed == undefined ? 0 : bennieUsed;\r\n\r\n    let ammoUsed = 0;\r\n\r\n    //SWADE rules for how much ammo is expended per RoF\r\n    let rofAmmo = { 1: 1, 2: 5, 3: 10, 4: 20, 5: 40, 6: 50 };\r\n\r\n    //SWADE rules SizeScale\r\n    let sizeScale = [\r\n        {size: -4, mod : -6}, {size: -3, mod : -4}, {size: -2, mod : -2}, {size: -1, mod : 0},\r\n        {size: 0, mod : 0}, {size: 1, mod : 0}, {size: 2, mod : 0}, {size: 3, mod : 0},\r\n        {size: 4, mod : 2}, {size: 5, mod : 2}, {size: 6, mod : 2}, {size: 7, mod : 2},\r\n        {size: 8, mod : 4}, {size: 9, mod : 4}, {size: 10, mod : 4}, {size: 11, mod : 4},\r\n        {size: 12, mod : 6}, {size: 13, mod : 6}, {size: 14, mod : 6}, {size: 15, mod : 6},\r\n        {size: 16, mod : 6}, {size: 17, mod : 6}, {size: 18, mod : 6}, {size: 19, mod : 6}, {size: 20, mod : 6}\r\n    ];\r\n\r\n\r\n    // Get weapon selected\r\n    let weapon = weapons.find((el) => el.name == html.find(\"#selectedWeapon\")[0].value);\r\n\r\n    // Get number of attack if a ranged attack or set to 1 for melee attack\r\n    let nbAttack = html.find(\"#selectedRoF\")[0] === undefined ? 1 : html.find(\"#selectedRoF\")[0].value;\r\n\r\n    // Get skill need for attack\r\n    let attackSkill = currentActor.items.find((el) => el.data.name == attackSkillName);\r\n\r\n    // Get Track ammo setting\r\n    let trackAmmo = html.find(\"#trackAmmo\")[0] === undefined ? 0 : html.find(\"#trackAmmo\")[0].checked ? -2 : 0;\r\n\r\n    // Get double Tap option\r\n    let doubleTapEdge = html.find(\"#doubleTap\")[0] === undefined ? 0 : html.find(\"#doubleTap\")[0].checked ? 1 : 0;\r\n\r\n    // Get three round burst ability\r\n    let threeRoundBurstAbility = html.find(\"#threeRoundBurst\")[0] === undefined ? 0 : html.find(\"#threeRoundBurst\")[0].checked ? 1 : 0;\r\n\r\n    // Set nbAttack for his special abilities\r\n    if (doubleTapEdge || threeRoundBurstAbility) nbAttack = 1\r\n\r\n    // Simulate unskilled skill when the attack skill is not found\r\n    if (attackSkill === null) attackSkill = { data : { data : { die : { sides : 4, modifier: -2 }, \"wild-die\" : { sides : 6 }  } } };\r\n\r\n    //Some check for Ranged Attack\r\n    if (attackSkillName == game.settings.get(\"swade-macros-simple\", \"skillShooting\")) {\r\n        ammoUsed = rofAmmo[nbAttack];\r\n\r\n        if (threeRoundBurstAbility) ammoUsed = 3;\r\n        if (doubleTapEdge) ammoUsed * 2;\r\n\r\n        // Check RoF\r\n        if ((nbAttack > weapon.data.data.rof)) {\r\n            ui.notifications.warn(i18n(\"swadeMacro.ui.notification.rofNotValid\"));\r\n            isValidConditions = false;\r\n        };\r\n        \r\n        // Check ammo\r\n        if (ammoUsed > weapon.data.data.shots) {\r\n            ui.notifications.warn(i18n(\"swadeMacro.ui.notification.noEnougthAmmo\"));\r\n            isValidConditions = false;\r\n        };\r\n    };\r\n\r\n    let diceResultPool = [];\r\n    // Roll Dices\r\n    for (let i = 0; i < nbAttack; i++) {\r\n        diceResultPool.push({ type: \"skillRoll\", roll : new Roll(\"1d\" + attackSkill.data.data.die.sides + \"x=\" + (attackSkill.data.data.die.modifier == \"\" ? \"\" : \" + \" + attackSkill.data.data.die.modifier)).roll(), saved : 1});\r\n    }\r\n\r\n    // Roll Wild for Joker\r\n    // Last entities in dicePoolResult is Wild\r\n    if (currentActor.data.data.wildcard) {\r\n        diceResultPool.push({ type: \"wildRoll\", roll : new Roll(\"1d\" + attackSkill.data.data[\"wild-die\"].sides + \"x=\").roll(), saved : 1});\r\n    }\r\n\r\n    // Unsaved lesser result from Dice Pool\r\n    if (diceResultPool.length > 1)\r\n        diceResultPool[diceResultPool.findIndex((el) => el.roll.total == Math.min(...diceResultPool.map((el) => el.roll.total)))].saved = 0;\r\n\r\n    // Build Modifiers\r\n    let skillModPool = [];\r\n    //skillModPool.push({ mod : \"skilled\", value : !parseInt(attackSkill.data.data.die.modifier) ? 0 : parseInt(attackSkill.data.data.die.modifier) });\r\n    skillModPool.push({ mod : \"rangePenality\", title : i18n(\"swadeMacro.attack.skillMod.rangePenality\"), abilitie : 0, value : html.find(\"#rangePenality\")[0] === undefined ? 0 : parseInt(html.find(\"#rangePenality\")[0].value) });\r\n    skillModPool.push({ mod : \"targetCover\", title : i18n(\"swadeMacro.attack.skillMod.targetCover\"), abilitie : 0, value : html.find(\"#targetCover\")[0] === undefined ? 0 : parseInt(html.find(\"#targetCover\")[0].value) });\r\n    skillModPool.push({ mod : \"isRecoil\", title : i18n(\"swadeMacro.attack.skillMod.isRecoil\"), abilitie : 0, value : html.find(\"#isRecoil\")[0] === undefined ? 0 : html.find(\"#isRecoil\")[0].checked ? -2 : 0 });\r\n    skillModPool.push({ mod : \"isUnstable\", title : i18n(\"swadeMacro.attack.skillMod.isUnstable\"), abilitie : 0, value : html.find(\"#isUnstable\")[0] === undefined ? 0 : html.find(\"#isUnstable\")[0].checked ? -2 : 0 });\r\n    skillModPool.push({ mod : \"distracted\", title : i18n(\"swadeMacro.attack.skillMod.distracted\"), abilitie : 0, value : currentActor.data.data.status.isDistracted ? -2 : 0});\r\n    skillModPool.push({ mod : \"vulnerable\", title : i18n(\"swadeMacro.attack.skillMod.vulnerable\" ), abilitie : 0, value : currentTarget.data.data.status.isVulnerable ? 2 : 0});\r\n    skillModPool.push({ mod : \"woundsFatigue\", title : i18n(\"swadeMacro.attack.skillMod.woundsFatigue\" ), abilitie : 0, value : (currentActor.calcWoundPenalties() + currentActor.calcFatiguePenalties())});\r\n    skillModPool.push({ mod : \"sizeScale\", title : i18n(\"swadeMacro.attack.skillMod.sizeScale\"), abilitie : 0, value : (sizeScale[sizeScale.findIndex((el) => el.size == currentActor.data.data.stats.size)].mod * -1) + sizeScale[sizeScale.findIndex((el) => el.size == currentTarget.data.data.stats.size)].mod });\r\n    skillModPool.push({ mod : \"doubleTap\", title : i18n(\"swadeMacro.attack.skillMod.doubleTap\"), abilitie : doubleTapEdge ? 1 : 0, value : doubleTapEdge ? 1 : 0 });\r\n    skillModPool.push({ mod : \"threeRoundBurst\", title : i18n(\"swadeMacro.attack.skillMod.threeRoundBurst\"), abilitie : threeRoundBurstAbility ? 1 : 0, value : threeRoundBurstAbility ? 1 : 0 });\r\n    if (attackSkillName == game.settings.get(\"swade-macros-simple\", \"skillShooting\")) \r\n    { \r\n        skillModPool.push({ mod : \"minStrength\", title : i18n(\"swadeMacro.attack.skillMod.minStr\"), abilitie : 0, value : weapon.data.data.minStr == \"\" ? 0 : diceStep.indexOf(weapon.data.data.minStr) > diceStep.indexOf((\"d\" + currentActor.data.data.attributes.strength.die.sides)) ? diceStep.indexOf((\"d\" + currentActor.data.data.attributes.strength.die.sides)) - diceStep.indexOf(weapon.data.data.minStr) : 0});\r\n    }\r\n    skillModPool.push({ mod : \"otherMod\", title : i18n(\"swadeMacro.attack.skillMod.otherMods\"), abilitie : 0, value : html.find(\"#otherMod\")[0] === undefined ? 0 : parseInt(html.find(\"#otherMod\")[0].value) });\r\n\r\n    // Set Total modifications variable\r\n    let totalMod = 0;\r\n    skillModPool.forEach((el) =>  totalMod += el.value );\r\n\r\n    // Check if critical failure !\r\n    let criticalFailure = (diceResultPool.filter((el) => el.roll.total == 1).length > (diceResultPool.length / 2)) && (!currentActor.data.data.wildcard || diceResultPool.find((el) => el.type == \"wildRoll\" && el.roll.total == 1) !== undefined);\r\n    let successResultPool = [];\r\n\r\n    // Create roll result template\r\n    diceResultPool.forEach((el) => {\r\n        el.bgColor = (el.type == \"wildRoll\" ? \"background-color: rgb(255,215,0, 0.35);\" : el.roll.total > el.roll.parts[0].faces ? \"background-color : rgb(0, 200, 0, 0.35)\" : el.roll.total == 1 ? \"background-color : rgb(255, 0, 0, 0.35)\" : \"\");\r\n        \r\n        if (el.saved){\r\n            let result = (el.roll.total + totalMod) >= (attackSkillName == game.settings.get(\"swade-macros-simple\", \"skillShooting\") ? 4 : parseInt(currentTarget.data.data.stats.parry.value)) + 4 ? { display : i18n(\"swadeMacro.commitAttackChat.raise\"), color : \"rgb(0, 0, 255, 0.35)\" } :\r\n            (el.roll.total + totalMod) >= (attackSkillName == game.settings.get(\"swade-macros-simple\", \"skillShooting\") ? 4 : parseInt(currentTarget.data.data.stats.parry.value)) ? { display : i18n(\"swadeMacro.commitAttackChat.hit\"), color : \"rgb(0, 200, 0, 0.35)\" } : { display : i18n(\"swadeMacro.commitAttackChat.miss\"), color : \"rgb(255, 0, 0, 0.35)\" }\r\n            if (result.display != i18n(\"swadeMacro.commitAttackChat.miss\")) successResultPool.push(result.display);\r\n            result.total = (el.roll.total + totalMod);\r\n            el.display = result;\r\n        };\r\n    });\r\n    \r\n    if (isValidConditions) {\r\n\r\n        let chatMessage = await renderTemplate(\"modules/swade-macros-simple/templates/macro-combat-flow/chat-commit-attack.html\",{\r\n            weaponImg : weapon.data.img,\r\n            weaponName : weapon.data.name,\r\n            weaponNotes : weapon.data.data.notes,\r\n            targetName : currentTarget.data.name,\r\n            isRangeAttack : attackSkillName == game.settings.get(\"swade-macros-simple\", \"skillShooting\"),\r\n            ammoUsed : ammoUsed,\r\n            bennieUsed : bennieUsed,\r\n            abilitiesUsed : skillModPool.filter((el) => el.abilitie == 1).map((el) => el.title).join(\", \").length > 0,\r\n            abilitites : skillModPool.filter((el) => el.abilitie == 1).map((el) => el.title).join(\", \"),\r\n            difficulty : attackSkillName == game.settings.get(\"swade-macros-simple\", \"skillShooting\") ? \"4\" : currentTarget.data.data.stats.parry.value,\r\n            modTitle : skillModPool.filter((el) => el.value != 0).map((el) => el.title + \" : \" + el.value).join(\"\\n\"),\r\n            modValue : totalMod,\r\n            isHit : successResultPool.length > 0 && !criticalFailure,\r\n            isCriticalFailure : criticalFailure,\r\n            isNotCriticalFailure : !criticalFailure,\r\n            diceResultPool : diceResultPool\r\n        });\r\n\r\n        // Apply bennie button and listener to chatTemplate if not critical failure\r\n        if (!criticalFailure) {\r\n            addEventListenerOnHtmlElement(\"#reRollButton\", 'click', (e) => { \r\n                e.target.style.display = \"none\"; \r\n                params.bennieUsed = true;\r\n                commitAttack(params);\r\n            }); \r\n        }\r\n        console.log(skillModPool.filter((el) => el.mod == \"rangePenality\")[0]);\r\n        // Apply damage button and listener to chatTemplate if 1+ success\r\n        if (successResultPool.length > 0) {\r\n            // Add event to chat message html element\r\n            addEventListenerOnHtmlElement(\"#callDamageButton\", 'click', (e) => { \r\n                damageSettings({\r\n                    weapon, \r\n                    successResultPool, \r\n                    attackSkillName, \r\n                    doubleTapEdge, \r\n                    threeRoundBurstAbility, \r\n                    isRangeAttack : attackSkillName == game.settings.get(\"swade-macros-simple\", \"skillShooting\"),\r\n                    rangePenality : skillModPool.filter((el) => el.mod == \"rangePenality\")[0].value\r\n                }, e.target);\r\n            }); \r\n        }\r\n\r\n        // Remove ammo from weapon\r\n        if (attackSkillName == game.settings.get(\"swade-macros-simple\", \"skillShooting\") && trackAmmo && !bennieUsed) {\r\n            console.log(weapon._id);\r\n            let newShots = (weapon.data.data.shots -= ammoUsed);\r\n            weapon.update({ \"data.shots\": newShots.toString() });\r\n            //currentActor.updateOwnedItem({_id: weapon._id,\"data.shots\": newShots.toString()});\r\n        };\r\n\r\n        // Displat chat template\r\n        // Check can use \"So Nice Dices\" mod effects\r\n        game.dice3d === undefined ? printMessage(chatMessage) : game.dice3d.showForRoll(diceResultPool.map((el) => el.roll)).then(displayed => {\r\n            printMessage(chatMessage);\r\n        });   \r\n    }\r\n}// end commitAttack\r\n\r\n// Calcul and display damages\r\nasync function damageResult(params)\r\n{\r\n    let weapon = params.weapon;\r\n    let successResultPool = params.successResultPool;\r\n    let attackSkillName = params.attackSkillName;\r\n    let bennieUsed = params.bennieUsed;\r\n    bennieUsed == undefined ? 0 : bennieUsed;\r\n\r\n    let html = params.html;\r\n    let doubleTapEdge = params.doubleTapEdge;\r\n    let threeRoundBurstAbility = params.threeRoundBurstAbility;\r\n\r\n    let rangePenality = params.rangePenality;\r\n\r\n    // SWADE rule, injury table page 95\r\n    let criticalInjury = [\r\n        { value : [ 2 ], injury : i18n(\"swadeMacro.damageResultChat.unmentionables\"), subInjury : undefined },\r\n        { value : [ 3, 4 ], injury : i18n(\"swadeMacro.damageResultChat.arm\"), subInjury : undefined },\r\n        { value : [ 5, 6, 7, 8, 9 ], injury : i18n(\"swadeMacro.damageResultChat.guts\"), subInjury : [\r\n            { value : [ 1, 2 ], injury : i18n(\"swadeMacro.damageResultChat.broken\") },\r\n            { value : [ 3, 4 ], injury : i18n(\"swadeMacro.damageResultChat.battered\") },\r\n            { value : [ 5, 6 ], injury : i18n(\"swadeMacro.damageResultChat.busted\") }\r\n        ]},\r\n        { value : [ 10, 11 ], injury : i18n(\"swadeMacro.damageResultChat.leg\"), subInjury : undefined },\r\n        { value : [ 12 ], injury : i18n(\"swadeMacro.damageResultChat.head\"), subInjury : [\r\n            { value : [ 1, 2, 3 ], injury : i18n(\"swadeMacro.damageResultChat.hideousScar\") },\r\n            { value : [ 4, 5 ], injury : i18n(\"swadeMacro.damageResultChat.blinded\") },\r\n            { value : [ 6 ], injury : i18n(\"swadeMacro.damageResultChat.brainDamage\") }\r\n        ]}\r\n    ];\r\n\r\n    let damageModPool = [];\r\n\r\n    // create a dice pool\r\n    let diceResultPool = [];\r\n\r\n    // get cover bonus\r\n    let coverBonus = html.find(\"#coverBonus\")[0] === undefined ? 0 : html.find(\"#coverBonus\")[0].value;\r\n\r\n    // get isGrettyDamage parameter\r\n    let isGrettyDamage = html.find(\"#isGrettyDamage\")[0] === undefined ? false : html.find(\"#isGrettyDamage\")[0].checked ? true : false;\r\n\r\n    // get ignore armor\r\n    let ignoreAmor = html.find(\"#ignoreArmor\")[0] === undefined ? false : html.find(\"#ignoreArmor\")[0].checked ? true : false;\r\n\r\n    // get shotgun template use\r\n    let isShotgunTemplate = html.find(\"#isShotgunTemplate\")[0] === undefined ? false : html.find(\"#isShotgunTemplate\")[0].checked ? true : false;\r\n\r\n    // get damage modification\r\n    if (doubleTapEdge) damageModPool.push({ mod : \"doubleTap\", title : i18n(\"swadeMacro.damageResultChat.doubleTap\"), abilitie : 0, value : 1});\r\n    if (threeRoundBurstAbility) damageModPool.push({ mod : \"threeRoundBurst\", title : i18n(\"swadeMacro.damageResultChat.threeRoundBurst\"), abilitie : 0, value : 1});\r\n    damageModPool.push({ mod : \"otherMod\", title : i18n(\"swadeMacro.damageResultChat.otherMods\"), abilitie : 0, value : html.find(\"#damageMod\")[0] === undefined ? 0 : parseInt(html.find(\"#damageMod\")[0].value)});\r\n\r\n    // Set Total damage variables\r\n    let totalDamageMod = 0;\r\n    damageModPool.forEach((el) =>  totalDamageMod += el.value );\r\n\r\n    // Roll Dices\r\n    for (let i = 0; i < successResultPool.length; i++) {\r\n        \r\n        let weaponDamage;\r\n        if (isShotgunTemplate) {\r\n            switch (rangePenality) {\r\n                case 0:\r\n                    weaponDamage = \"3d6\";\r\n                    break;\r\n                case -2:\r\n                    weaponDamage = \"2d6\";\r\n                    break;\r\n                case -4:\r\n                    weaponDamage = \"1d6\";\r\n                    break;\r\n                default:\r\n                    weaponDamage = \"0\";\r\n                    break;\r\n            }\r\n        }else{\r\n            weaponDamage = weapon.data.data.damage;\r\n            // Downgrade weapon damage for minStr restrcitions\r\n            if (attackSkillName == game.settings.get(\"swade-macros-simple\", \"skillFighting\") && weapon.data.data.minStr != \"\" && diceStep.indexOf(weapon.data.data.minStr) > diceStep.indexOf((\"d\" + currentActor.data.data.attributes.strength.die.sides))) \r\n            {\r\n                weaponDamage = \"@str+1d\" + currentActor.data.data.attributes.strength.die.sides + \" + \" + (currentActor.data.data.attributes.strength.die.modifier != \"0\" ? currentActor.data.data.attributes.strength.die.modifier : \"\");\r\n            }     \r\n    \r\n            // Update @str from Strenght dice\r\n            let regexStr = /[@]str/g;\r\n            weaponDamage = weaponDamage.replace(regexStr, \"1d\" + currentActor.data.data.attributes.strength.die.sides)\r\n        }\r\n\r\n        // Add Raise\r\n        weaponDamage += (successResultPool[i] == i18n(\"swadeMacro.commitAttackChat.raise\") ? \" + 1d6\" : \"\")\r\n        weaponDamage += \" + \" + totalDamageMod;\r\n\r\n        // Explode all dices\r\n        let regexDiceExplode = /d[0-9]{1,2}/g;\r\n        weaponDamage = weaponDamage.replace(regexDiceExplode, \"$&x=\");\r\n\r\n        // Roll dices damages\r\n        diceResultPool.push({ type: \"damageRoll\", roll : new Roll(weaponDamage).roll(), raise : successResultPool[i] == i18n(\"swadeMacro.commitAttackChat.raise\") ? 1 : 0});\r\n    }\r\n\r\n    // Prepare template\r\n    //let displayRollResultTemplate = ``;\r\n    let targetShaken = currentTarget.data.data.status.isShaken;\r\n\r\n    // Get armor equipped\r\n    let armorToughness = 0;\r\n    if (!ignoreAmor) currentTarget.items.filter((el) => el.data.type == \"armor\" && el.data.data.equipped).forEach((el) => armorToughness += parseInt(el.data.data.armor));\r\n\r\n    // Create roll result template\r\n    diceResultPool.forEach((el) => {\r\n\r\n        el.rollBgColor = el.raise ? \"background-color: rgb(0, 200, 0, 0.35);\" : \"\";\r\n        el.rollTitle = el.roll.formula + \"\\n\" + el.roll.result;\r\n\r\n        // Calcul total toughness\r\n        let totalToughness = (parseInt(currentTarget.data.data.stats.toughness.value) \r\n                            + (parseInt(weapon.data.data.ap) > (parseInt(armorToughness) + parseInt(coverBonus)) ? 0 : (parseInt(armorToughness) + parseInt(coverBonus)) - parseInt(weapon.data.data.ap))\r\n                            + parseInt(currentTarget.data.data.stats.toughness.modifier));\r\n\r\n        el.toughness = totalToughness;\r\n        el.toughnessPassed = el.roll.total >= totalToughness;\r\n        el.toughnessNotPassed = !el.toughnessPassed;\r\n        \r\n        // Check if roll is better that toughness\r\n        if (el.roll.total >= totalToughness) {\r\n    \r\n            // Calcul wounds\r\n            let wounds = Math.floor(((el.roll.total - totalToughness) / 4)) + (targetShaken ? 1 : 0);\r\n\r\n            el.wounds = wounds;\r\n            el.isShaken = targetShaken;\r\n            el.isNotShaken = !targetShaken;\r\n            \r\n            el.wounded = wounds > 0;\r\n            if (wounds > 0)\r\n            {\r\n                el.woundRank = (totalToughness + (wounds * 4));\r\n                el.isGrettyDamage = isGrettyDamage && ((targetShaken && wounds > 1) || !targetShaken);\r\n\r\n                if (isGrettyDamage && ((targetShaken && wounds > 1) || !targetShaken)) {\r\n\r\n                    let roll1 =new Roll(\"2d6\").roll().total;\r\n                    let roll2 =new Roll(\"1d6\").roll().total;\r\n                    \r\n                    let injury = criticalInjury.find((el) => el.value.includes(roll1));\r\n                    let subInjury =  injury.subInjury != undefined ? injury.subInjury.find((el) => el.value.includes(roll2)) : undefined;\r\n\r\n                    el.grittyDamageTitle = roll1 + \" \" + (injury.subInjury != undefined ? \"-> \" + roll2 : \"\");\r\n                    el.grittyDamageValue = subInjury == undefined ? injury.injury : subInjury.injury;\r\n                }\r\n            }\r\n            \r\n            targetShaken = true;\r\n        }\r\n\r\n    });\r\n\r\n    let chatMessage = await renderTemplate(\"modules/swade-macros-simple/templates/macro-combat-flow/chat-damage-result.html\",{\r\n        weaponImg : weapon.data.img,\r\n        weaponName : weapon.data.name,\r\n        weaponAp : weapon.data.data.ap,\r\n        targetName : currentTarget.data.name,\r\n        toughnessValue : currentTarget.data.data.stats.toughness.value,\r\n        bennieUsed : bennieUsed,\r\n        armorTitle : \"armor : \" + armorToughness + \"\\n\" + \"cover : \" + coverBonus,\r\n        armorValue : armorToughness + parseInt(coverBonus),\r\n        damageModTitle : damageModPool.map((el) => el.title + \" : \" + el.value).join(\"\\n\"),\r\n        damageModValue : totalDamageMod,\r\n        diceResultPool : diceResultPool\r\n    });\r\n\r\n    // Add event to chat message html element\r\n    addEventListenerOnHtmlElement(\"#reRollButton\", 'click', (e) => { \r\n        e.target.style.display = \"none\"; \r\n        params.bennieUsed = true;\r\n        damageResult(params);\r\n    }); \r\n\r\n    // Displat chat template\r\n    // Check can use \"So Nice Dices\" mod effects\r\n    game.dice3d === undefined ? printMessage(chatMessage) : game.dice3d.showForRoll(diceResultPool.map((el) => el.roll)).then(displayed => {\r\n        printMessage(chatMessage);\r\n    });\r\n\r\n} // end damageCalculation","author":"TW5dUO4zIyOkAYKw","img":"icons/svg/combat.svg","actorIds":[],"_id":"CJK5BoO8mDzuOaKQ"}
{"name":"Card Draw","permission":{"default":0,"TW5dUO4zIyOkAYKw":3},"type":"script","flags":{},"scope":"global","command":"/*\r\nFeatures\r\n- Draw n cards placing them in the scene\r\n- This macro can reset the table preventing from the error\r\n- This macro can line up the cards\r\n*/\r\n\r\ngetRequirements();\r\n\r\nfunction getRequirements() {\r\n  //How Many Cards to Draw\r\n  //Width/Height\r\n  //Which Table to Draw From\r\n  let cardsList = \"\";\r\n  Array.from(game.tables).map((el) => {\r\n    cardsList += `<option value=\"${el.data.name}\">${el.data.name}</option>`;\r\n  });\r\n\r\n  let template = `\r\n  <p>Table to Draw From: <select id=\"tableName\">${cardsList}</select></p>\r\n  <p>\r\n    Cards to Draw (Lines x Columns): <input id=\"dogFightLines\" type=\"number\" min=\"1\" style=\"width: 50px;\" value=1> x <input id=\"dogFightColumns\" type=\"number\" min=\"1\" style=\"width: 50px;\" value=9>\r\n  </p>  \r\n  <p>\r\n    Height: <input id=\"height\" type=\"number\" min=\"1\" style=\"width: 50px\" value=150>\r\n    Width: <input id=\"width\" type=\"number\" min=\"1\" style=\"width: 50px\" value=107>\r\n  </p>\r\n  <br />\r\n  <p>\r\n    <input type=\"checkbox\" id=\"reset\" checked/>\r\n    Reset Table?\r\n  </p> \r\n  <p>\r\n    <input type=\"checkbox\" id=\"stackupcards\"/>\r\n    Just stack up all cards\r\n  </p>  \r\n  <br />  \r\n  <p>\r\n    <h3>Horizontal spacing between cards</h3>\r\n    <input id=\"spacingx\" type=\"range\" min=\"0\" max=\"100\" value=\"0\" step=\"5\">\r\n  </p>\r\n  <p>\r\n    <h3>Vertical spacing between cards (dogfight only)</h3>\r\n    <input id=\"spacingy\" type=\"range\" min=\"0\" max=\"100\" value=\"100\" step=\"5\">  \r\n  </p>\r\n  `;\r\n  new Dialog({\r\n    title: \"Draw Cards To Table\",\r\n    content: template,\r\n    buttons: {\r\n      ok: {\r\n        label: \"Draw\",\r\n        callback: async (html) => {\r\n          makeTiles(html);\r\n        },\r\n      },\r\n      cancel: {\r\n        label: \"Cancel\",\r\n      },\r\n    },\r\n  }).render(true);\r\n}\r\n\r\nasync function makeTiles(html) {  \r\n  let spacingx = html.find(\"#spacingx\")[0].value/100;\r\n  let spacingy = html.find(\"#spacingy\")[0].value/100;\r\n  let dogFightLines = html.find(\"#dogFightLines\")[0].value;\r\n  let dogFightColumns = html.find(\"#dogFightColumns\")[0].value;  \r\n  let resetTable = html.find(\"#reset\")[0].value;\r\n  const stackupcards = html.find(\"#stackupcards\")[0].checked;\r\n  let tableName = html.find(\"#tableName\")[0].value;\r\n  let cardsToDraw = dogFightLines*dogFightColumns;\r\n  let _height = html.find(\"#height\")[0].value;\r\n  let _width = html.find(\"#width\")[0].value;\r\n\r\n  if (resetTable=='on') {\r\n    await game.tables.find((el) => el.data.name == tableName).reset();\r\n  }\r\n\r\n  let cardDraws = (\r\n    await game.tables\r\n      .find((el) => el.data.name == tableName)\r\n      .drawMany(cardsToDraw)\r\n  ).results;\r\n\r\n  let centerX = game.scenes.active.data.width / 3;\r\n  let centerY = game.scenes.active.data.height / 2;\r\n  \r\n  let deltaX = 0;\r\n  let deltaY = 0;\r\n  let counter = 0;\r\n  \r\n  //console.log(spacingx + '/' + spacingy + ' stackupcards:' + (stackupcards!='on'));\r\n  for (let y = 0; y < dogFightLines; y++) {\r\n    deltaY = ( _height*y + _height*spacingy*y );\r\n    for (let x = 0; x < dogFightColumns; x++) {                \r\n      deltaX = ( _width*x + _width*spacingx*x );            \r\n      if (stackupcards) {\r\n        deltaX = 0;\r\n        deltaY = 0;        \r\n      }\r\n      await Tile.create({\r\n        img: cardDraws[counter].img,\r\n        width: _width,\r\n        height: _height,\r\n        x: centerX + deltaX,\r\n        y: centerY + deltaY\r\n      });      \r\n      //console.log('x:' + x + ' y:' + y + ' counter:' + counter + ' deltaX:' + deltaX + ' deltaY:' + deltaY);\r\n      counter = counter + 1;\r\n      //console.log('centerX: ' + centerX + ' / deltaX: ' + deltaX + ' / centerX+deltaX:' + (centerX+deltaX) ); \r\n    }      \r\n  }\r\n}","author":"TW5dUO4zIyOkAYKw","img":"icons/svg/thrust.svg","actorIds":[],"_id":"GISrAaUolio7Rd8h"}
{"name":"Adventure Card","permission":{"default":0,"TW5dUO4zIyOkAYKw":3},"type":"script","flags":{},"scope":"global","command":"/* Mini Tutorial\r\n1 - Import the cards to a rollable table (i recommend Card Deck Importer - follow the instructions there). Name the rollable table AdventureDeck or change below.\r\n2 - Create an item (gear) named Adventure Card. Give it to the characters that will use it.\r\n3 - Run the macro.\r\n*/\r\n\r\nvar rollTableName = \"AdventureDeck\"; /// name of the rolltable with adventure cards\r\nvar itemCard = \"Adventure Card\"; /// name of the item holding the adventure card\r\n\r\nlet chars = game.actors.entities.filter((t) => t.data.type === \"character\"); /// all the chars\r\nlet optionchars = \"\";\r\nvar allchars = [];\r\n\r\nfor (const char of chars) {\r\n  let myitem = char.items.find((i) => i.name === itemCard);\r\n  if (myitem !== null) {\r\n    /// filters the ones that has the item\r\n    optionchars += `<option value=\"` + char._id + `\">` + char.name + `</option>`;\r\n    allchars.push(char._id);\r\n  }\r\n}\r\n\r\nif (!optionchars) {\r\n  /// no chars\r\n  ui.notifications.warn(`No character has the item ` + itemCard + `.`, {});\r\n}\r\n\r\nlet template =\r\n  `<p>How many cards? <input type=\"number\" value=\"1\" id=\"qtde\" style=\"width:50px\" /></p>\r\n<p>For wich character? <select id=\"jogs\"><option value=\"todos\">All</option>` +\r\n  optionchars +\r\n  `</select></p>`;\r\nnew Dialog({\r\n  title: \"Give Adventure Cards\",\r\n  content: template,\r\n  buttons: {\r\n    ok: {\r\n      label: \"Give\",\r\n      callback: function (html) {\r\n        applyFormOptions(html);\r\n      },\r\n    },\r\n    cancel: {\r\n      label: \"Cancel\",\r\n    },\r\n  },\r\n}).render(true);\r\n\r\nfunction drawFromTable(tableName) {\r\n  /// thanks to Forien for this. Check his modules https://foundryvtt.com/community/forien\r\n  const table = game.tables.getName(tableName);\r\n  if (!table) {\r\n    ui.notifications.warn(`Table ${tableName} not found.`, {});\r\n    return;\r\n  }\r\n  let results = table.roll().results;\r\n\r\n  // if table is without replacemenets, mark results as drawn\r\n  if (table.data.replacement === false) {\r\n    results = results.map((r) => {\r\n      r.drawn = true;\r\n      return r;\r\n    });\r\n\r\n    table.updateEmbeddedEntity(\"TableResult\", results);\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\nfunction applyFormOptions(html) {\r\n  let qtde = html.find(\"#qtde\")[0].value;\r\n  let selchar = html.find(\"#jogs\")[0].value;\r\n\r\n  if (selchar === \"todos\") {\r\n    for (let i = 0; i < allchars.length; i++) {\r\n      giveCards(qtde, allchars[i]);\r\n    }\r\n  } else {\r\n    giveCards(qtde, selchar);\r\n  }\r\n\r\n  let chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: \"Adventure Cards given\",\r\n  };\r\n  ChatMessage.create(chatData, {});\r\n}\r\n\r\nfunction giveCards(howmany, actorId) {\r\n  let char = game.actors.get(actorId);\r\n  let myitem = char.items.find((i) => i.name === itemCard);\r\n  let updatedesc = \"\";\r\n\r\n  for (let i = 1; i <= howmany; i++) {\r\n    let results = drawFromTable(rollTableName);\r\n    updatedesc +=\r\n      \"<p>@Compendium[\" + results[0].collection + \".\" + results[0].resultId + \"]{\" + results[0].text + \"}</p>\";\r\n  }\r\n\r\n  myitem.update({ [\"data.description\"]: updatedesc });\r\n}\r\n","author":"TW5dUO4zIyOkAYKw","img":"icons/svg/chest.svg","actorIds":[],"_id":"I9HkaQDUCj3Yv6Qp"}
